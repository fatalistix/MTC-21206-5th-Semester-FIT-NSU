/*
 * 6) Реализуйте калькулятор для обратной польской записи (RPN) арифметических 
 * выражений. Напишите функции перевода арифметический выражений в RPN и 
 * наоборот.
 * 
 * Использовать функцию: getUrlParameter
 */

import lingo/pegcode/driver;
import sys/system;
import string;

Expr ::= Int, Add, Mul;
Int(value : int);
Add(l : Expr, r : Expr);
Mul(l : Expr, r : Expr);

pnLingoGrammarOp : ref Maybe<[PegOp]> = ref None();
inLingoGrammarOp : ref Maybe<[PegOp]> = ref None();

pnLingoGrammar() {
    onlyOnce(pnLingoGrammarOp, \ -> {
        compilePegGrammar("#include lingo/pn.lingo");
    });
}

inLingoGrammar() {
    onlyOnce(inLingoGrammarOp, \ -> {
        compilePegGrammar("#include lingo/in.lingo");
    });
}

pnToAst(str : string) -> flow {
    parsic(pnLingoGrammar(), str, defaultPegActions);
}

inToAst(str : string) -> flow {
    parsic(inLingoGrammar(), str, defaultPegActions);
}

astToInStr(ast: Expr) -> string {
    switch (ast) {
        Int(i): {
            i2s(i);
        }
        Add(l, r): {
            strGlue(["(", astToInStr(l), "+", astToInStr(r), ")"], "");
        }
        Mul(l, r): {
            strGlue(["(", astToInStr(l), "*", astToInStr(r), ")"], "");
        }
    };
}

calc(ast : Expr) -> int {
    switch (ast) {
        Int(value): {
            value;
        }
        Add(l, r): {
            calc(l) + calc(r);
        }
        Mul(l, r): {
            calc(l) * calc(r);
        }
    }
}

astToRpnStr(ast : Expr) -> string {
    switch (ast) {
        Int(value): {
            i2s(value);
        }
        Add(l, r): {
            strGlue([astToRpnStr(l), astToRpnStr(r), "+"], " ");
        }
        Mul(l, r): {
            strGlue([astToRpnStr(l), astToRpnStr(r), "*"], " ");
        }
    }
}

rpnToPnRec(i : int, refRpnArr : ref [string]) -> Pair<string, int> {
    
    if (isDigits((^refRpnArr)[i])) {
        Pair((^refRpnArr)[i], i);
    } else {
        r = rpnToPnRec(i - 1, refRpnArr);
        l = rpnToPnRec(r.second - 1, refRpnArr);
        Pair(strGlue([(^refRpnArr)[i], l.first, r.first], " "), l.second);
    }
}

rpnToPn(str : string) -> string {
    splitted = strSplit(str, " ");
    splittedWithoutEmpties : ref [string] = ref [];
    for(0, \i -> i < length(splitted), \i -> {
        if (splitted[i] != "") {
            refArrayPush(splittedWithoutEmpties, splitted[i]);
            i + 1;
        } else {
            i + 1;
        }
    });

    rpnToPnRec(length(^splittedWithoutEmpties) - 1, splittedWithoutEmpties).first;
}

main() {
    println(rpnToPn("3 5 * 4 +"));

    print("Select option:\n1: rpnToIn\n2: inToRpn\n3: calcRpn\n4: calcIn\n> ");
    temp = readUntil("\n");
    str = substring(temp, 0, strlen(temp) - 1);
    if (str == "1") {
        print("enter expression:\n> ");
        t = readUntil("\n");
        s = substring(t, 0, strlen(t) - 1);
        print("ans> ");
        println(astToInStr(pnToAst(rpnToPn(s))));
    } else if (str == "2") {
        print("enter expression:\n> ");
        t = readUntil("\n");
        s = substring(t, 0, strlen(t) - 1);
        print("ans> ");
        println(astToRpnStr(inToAst(s)));
    } else if (str == "3") {
        print("enter expression:\n> ");
        t = readUntil("\n");
        s = substring(t, 0, strlen(t) - 1);
        print("ans> ");
        println(calc(pnToAst(rpnToPn(s))));
    } else if (str == "4") {
        print("enter expression:\n> ");
        t = readUntil("\n");
        s = substring(t, 0, strlen(t) - 1);
        print("ans> ");
        println(calc(inToAst(s)));
    } else {
        println("unknonwn. finishing...");
    }

    quit(0);
}




// println("what do you want to do:\n1: ");
    // temp = readUntil("\n");
    // str = substring(temp, 0, strlen(temp) - 1);

    // println(pnToAst(reverse("1 3 + 2 *")));
    // println(rpnToPn("3 5 * 4 +"));


// infixToReversePolish(str : string) -> string {
//     operands : ref [int] = ref [];
//     operations : ref [int] = ref [];
//     curNum : int = 0;
//     for(0, \i -> i < length(str); \i -> {
//         isDigit
//     });
// }
