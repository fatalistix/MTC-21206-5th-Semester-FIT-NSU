/*
 * 5) Написать PEG-парсер грамматики простых арифметических выражений, 
 * генерирующий AST дерево, используя библиотеку lingo.
 * возможные термы: целочисленные константы, (t1+t2), (t1*t2)
 * 
 * PEG - Parsing Expression Grammars (грамматика задаётся в отдельном файле 
 * lingo)
 * 
 * ввод – строка "(((3 + 11) * 2) * (10 + 5))";
 * ast = strToAst(exprStr);
 * вывод – на машинном языке грамматики
 *
 * Использовать функции : parsic, compilePegGrammar
 */


import lingo/pegcode/driver;

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

Expr ::= Int, Add, Mul;
Int(value : int);
Add(l : Expr, r : Expr);
Mul(l : Expr, r : Expr);

lingoGrammar() {
	onlyOnce(lingoGrammarOp, \ -> {
		compilePegGrammar("#include lingo/lingo.lingo");
	});
}

strToAst(str : string) -> flow {
	parsic(lingoGrammar(), str, defaultPegActions);
}

main() {
	result = strToAst("(((3 + 11) * 2) * (10 + 5))");
    println(result);
	println(getUrlParameter("stdin"));
    quit(0);
}